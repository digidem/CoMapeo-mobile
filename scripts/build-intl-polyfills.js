#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const {
  shouldPolyfill: shouldPolyfillRelativeTime,
} = require('@formatjs/intl-relativetimeformat/should-polyfill');

const {
  shouldPolyfill: shouldPolyfillPlural,
} = require('@formatjs/intl-pluralrules/should-polyfill');
const messages = require('../src/frontend/translations/messages.json');
const languages = require('../src/frontend/languages.json');

// For @formatjs/intl-relativetimeformat and @formatjs/intl-locale, which are needed for jsc-intl runtime
buildIntlRelativeTimeFormat();

function buildIntlRelativeTimeFormat() {
  const outputPath = path.join(
    __dirname,
    '../src/frontend/polyfills/intl-relativetimeformat.ts',
  );

  const supportedLocales = Object.keys(messages).filter(locale => {
    const hasAtLeastOneTranslatedString =
      Object.keys(messages[locale]).length > 0;

    const hasTranslatedLanguageName = !!languages[locale];

    return hasAtLeastOneTranslatedString && hasTranslatedLanguageName;
  });

  const localesToPolyfillRelativeTime = new Set();
  const localesToPolyfillPlural = new Set();

  for (const l of supportedLocales) {
    try {
      const polyfillableLocaleRelativeTime = shouldPolyfillRelativeTime(l);
      if (polyfillableLocaleRelativeTime) {
        localesToPolyfillRelativeTime.add(polyfillableLocaleRelativeTime);
      }
      const polyfillableLocalePlural = shouldPolyfillPlural(l);
      if (polyfillableLocalePlural) {
        localesToPolyfillPlural.add(polyfillableLocalePlural);
      }
    } catch (err) {
      console.warn(err.message);
    }
  }

  const writer = fs.createWriteStream(outputPath, {flags: 'w'});

  writer.write(
    '// This file is automatically generated through scripts/build-intl-polyfills.js. Do not edit this directly!\n// If you need to rebuild it, you can run `npm run build:intl-polyfills`\n',
  );
  writer.write(createImportStatement('@formatjs/intl-locale/polyfill'));
  writer.write(createImportStatement('@formatjs/intl-pluralrules/polyfill'));
  writer.write(
    createImportStatement('@formatjs/intl-relativetimeformat/polyfill'),
  );

  for (const l of localesToPolyfillPlural.values()) {
    writer.write(
      createImportStatement(`@formatjs/intl-pluralrules/locale-data/${l}`),
    );
  }

  for (const l of localesToPolyfillRelativeTime.values()) {
    writer.write(
      createImportStatement(
        `@formatjs/intl-relativetimeformat/locale-data/${l}`,
      ),
    );
  }

  writer.end();

  function createImportStatement(module) {
    return `import "${module}";\n`;
  }

  console.log(`Successfully added intl polyfill imports to ${outputPath}`);
}
