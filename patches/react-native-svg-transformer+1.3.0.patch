diff --git a/node_modules/react-native-svg-transformer/index.js b/node_modules/react-native-svg-transformer/index.js
index ac1fe67..3a32824 100644
--- a/node_modules/react-native-svg-transformer/index.js
+++ b/node_modules/react-native-svg-transformer/index.js
@@ -1,6 +1,11 @@
 const { resolveConfig, transform } = require("@svgr/core");
 const resolveConfigDir = require("path-dirname");
 
+// Implementation uses a fragile approach to figure out which babel transformer to use
+// Make it use the one tied to React Native CLI, which is what's used to bundle our app
+// https://github.com/kristerkari/react-native-svg-transformer/issues/333
+const babelTransformer = require("@react-native/metro-babel-transformer");
+
 /**
  * `metro-react-native-babel-transformer` has recently been migrated to the React Native
  * repository and published under the `@react-native/metro-babel-transformer` name.
@@ -9,17 +14,17 @@ const resolveConfigDir = require("path-dirname");
  * Additionally, Expo v50.0.0 has begun using @expo/metro-config/babel-transformer as its upstream transformer.
  * To avoid breaking projects, we should prioritze that package if it is available.
  */
-const upstreamTransformer = (() => {
-  try {
-    return require("@expo/metro-config/babel-transformer");
-  } catch (error) {
-    try {
-      return require("@react-native/metro-babel-transformer");
-    } catch (error) {
-      return require("metro-react-native-babel-transformer");
-    }
-  }
-})();
+// const upstreamTransformer = (() => {
+//   try {
+//     return require("@expo/metro-config/babel-transformer");
+//   } catch (error) {
+//     try {
+//       return require("@react-native/metro-babel-transformer");
+//     } catch (error) {
+//       return require("metro-react-native-babel-transformer");
+//     }
+//   }
+// })();
 
 const defaultSVGRConfig = {
   native: true,
@@ -49,11 +54,11 @@ module.exports.transform = async ({ src, filename, options }) => {
     const svgrConfig = config
       ? { ...defaultSVGRConfig, ...config }
       : defaultSVGRConfig;
-    return upstreamTransformer.transform({
+    return babelTransformer.transform({
       src: await transform(src, svgrConfig),
       filename,
       options
     });
   }
-  return upstreamTransformer.transform({ src, filename, options });
+  return babelTransformer.transform({ src, filename, options });
 };
